version: '3'

networks:
  backend: 
    driver: ${NETWORKS_DRIVER}
    ipam:
      driver: default
      config:
        - subnet: 192.18.0.1/24

volumes:
  mysql:
    driver: ${VOLUMES_DRIVER}
  mssql:
    driver: ${VOLUMES_DRIVER}
  mariadb: 
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}

services:

### Workspace Utilities ##################################
  workspace:
    build:
      context: ./workspace
      args:
        - LARADOCK_PHP_VERSION=${PHP_VERSION}
        - INSTALL_PHPREDIS=${WORKSPACE_INSTALL_PHPREDIS}
        - INSTALL_MSSQL=${WORKSPACE_INSTALL_MSSQL}
        - COMPOSER_GLOBAL_INSTALL=${WORKSPACE_COMPOSER_GLOBAL_INSTALL}
        - COMPOSER_AUTH=${WORKSPACE_COMPOSER_AUTH}
        - COMPOSER_REPO_PACKAGIST=${WORKSPACE_COMPOSER_REPO_PACKAGIST}
        - INSTALL_MYSQL_CLIENT=${WORKSPACE_INSTALL_MYSQL_CLIENT}
        - PUID=${WORKSPACE_PUID}
        - PGID=${WORKSPACE_PGID}
        - TZ=${WORKSPACE_TIMEZONE}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    tty: true
    environment:
      - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
      - DOCKER_HOST=tcp://docker-in-docker:2375
    networks:
      backend:
        ipv4_address: ${IP_WORKSPACE}
    links:
      - docker-in-docker
      - mssql

### PHP-FPM ##############################################
  php-fpm:
    build:
      context: ./php-fpm
      args:
        - LARADOCK_PHP_VERSION=${PHP_VERSION}
        - INSTALL_MSSQL=${PHP_FPM_INSTALL_MSSQL}
        - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
        - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
        - INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
        - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
        - INSTALL_EXIF=${PHP_FPM_INSTALL_EXIF}
        - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
        - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
        - INSTALL_GHOSTSCRIPT=${PHP_FPM_INSTALL_GHOSTSCRIPT}
        - INSTALL_LDAP=${PHP_FPM_INSTALL_LDAP}
        - INSTALL_IMAGE_OPTIMIZERS=${PHP_FPM_INSTALL_IMAGE_OPTIMIZERS}
        - INSTALL_IMAGEMAGICK=${PHP_FPM_INSTALL_IMAGEMAGICK}
        - INSTALL_CALENDAR=${PHP_FPM_INSTALL_CALENDAR}
        - INSTALL_FAKETIME=${PHP_FPM_INSTALL_FAKETIME}
        - INSTALL_APCU=${PHP_FPM_INSTALL_APCU}
        - INSTALL_YAML=${PHP_FPM_INSTALL_YAML}
        - INSTALL_ADDITIONAL_LOCALES=${PHP_FPM_INSTALL_ADDITIONAL_LOCALES}
        - INSTALL_MYSQL_CLIENT=${PHP_FPM_INSTALL_MYSQL_CLIENT}
        - ADDITIONAL_LOCALES=${PHP_FPM_ADDITIONAL_LOCALES}
    volumes:
      - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
    expose:
      - "9000"
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    environment:
      - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
      - DOCKER_HOST=tcp://docker-in-docker:2375
      - FAKETIME=${PHP_FPM_FAKETIME}
    depends_on:
      - workspace
    networks:
      backend:
        ipv4_address: ${IP_PHP_FPM}
    links:
      - docker-in-docker
      - mssql

### NGINX Server #########################################
  nginx:
    build:
      context: ./nginx
      args:
        - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
        - CHANGE_SOURCE=${CHANGE_SOURCE}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
      - ${NGINX_SSL_PATH}:/etc/nginx/ssl
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
    depends_on:
      - php-fpm
    networks:
      backend:
        ipv4_address: ${IP_NGINX}
    links:
      - mssql

### MSSQL ################################################
  mssql:
    build:
      context: ./mssql
    environment:
      - MSSQL_DATABASE=${MSSQL_DATABASE}
      - SA_PASSWORD=${MSSQL_PASSWORD}
      - ACCEPT_EULA=Y
    volumes:
      - ${DATA_PATH_HOST}/mssql:/var/opt/mssql
    ports:
      - "${MSSQL_PORT}:1433"
    networks:
      backend:
        ipv4_address: ${IP_MSSQL}

## MariaDB ##############################################
  # mariadb:
  #   build: ./mariadb
  #   volumes:
  #     - ${DATA_PATH_HOST}/mariadb:/var/lib/mysql
  #     # - ./dbdata/mariadb:/var/lib/mysql
  #     - ${MARIADB_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
  #   ports:
  #     - "${MARIADB_PORT}:3306"
  #   environment:
  #     - MYSQL_DATABASE=${MARIADB_DATABASE}
  #     - MYSQL_USER=${MARIADB_USER}
  #     - MYSQL_PASSWORD=${MARIADB_PASSWORD}
  #     - MYSQL_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
  #   networks:
  #     backend:
  #       ipv4_address: ${IP_MARIADB}

### MySQL ################################################
  mysql:
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${WORKSPACE_TIMEZONE}
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
      - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      backend:
        ipv4_address: ${IP_MYSQL}

## Redis ################################################
  redis:
    build: ./redis
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      backend:
        ipv4_address: ${IP_REDIS}

## Redis Cluster ##########################################
  redis-cluster:
    build: ./redis-cluster
    ports:
      - "${REDIS_CLUSTER_PORT_RANGE}:7000-7005"
    networks:
      backend:
        ipv4_address: ${IP_REDIS_CLUSTER}

## phpMyAdmin ###########################################
  phpmyadmin:
    build: ./phpmyadmin
    environment:
      - PMA_ARBITRARY=1
      - MYSQL_USER=${PMA_USER}
      - MYSQL_PASSWORD=${PMA_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${PMA_ROOT_PASSWORD}
    ports:
      - "${PMA_PORT}:80"
    depends_on:
      - "${PMA_DB_ENGINE}"
    networks:
      backend:
        ipv4_address: ${IP_PMA}

## Mailhog ################################################
  mailhog:
    build: ./mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      backend:
        ipv4_address: ${IP_MAILHOG}
      # - frontend

## REDISWEBUI ################################################
  redis-webui:
    build:
      context: ./redis-webui
    environment:
      - ADMIN_USER=${REDIS_WEBUI_USERNAME}
      - ADMIN_PASS=${REDIS_WEBUI_PASSWORD}
      - REDIS_1_HOST=${REDIS_WEBUI_CONNECT_HOST}
      - REDIS_1_PORT=${REDIS_WEBUI_CONNECT_PORT}
    networks:
      backend:
        ipv4_address: ${IP_REDIS_WEBUI}
    ports:
      - "${REDIS_WEBUI_PORT}:80"
    depends_on:
      - redis

### Docker-in-Docker ################################################
  docker-in-docker:
    image: docker:dind
    privileged: true
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
    expose:
      - 2375
    networks:
      backend:
        ipv4_address: ${IP_DOCKER_IN_DOCKER}

## Sawagger UI #######################################################
  swagger-ui:
    build:
      context: ./swagger-ui
    ports:
      - "${SWAGGERUI_PORT}:8080"  
    hostname: swaggerui
    volumes:
      - ./swagger-ui/swagger/altrovis.json:/app/swagger/swagger.json
    networks:
      backend:
        ipv4_address: ${IP_SWAGGER_UI}
    # environment